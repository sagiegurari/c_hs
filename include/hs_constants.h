#ifndef __HS_CONSTANTS_H__
#define __HS_CONSTANTS_H__

enum HSHttpMethod
{
  HS_HTTP_METHOD_UNKNOWN = 0,
  HS_HTTP_METHOD_GET,
  HS_HTTP_METHOD_POST,
  HS_HTTP_METHOD_PUT,
  HS_HTTP_METHOD_DELETE,
  HS_HTTP_METHOD_HEAD,
  HS_HTTP_METHOD_CONNECT,
  HS_HTTP_METHOD_OPTIONS,
  HS_HTTP_METHOD_TRACE,
  HS_HTTP_METHOD_PATCH,
};

enum HSHttpProtocol
{
  HS_HTTP_PROTOCOL_UNKNOWN = 0,
  HS_HTTP_PROTOCOL_HTTP,
  HS_HTTP_PROTOCOL_HTTPS,
};

enum HSHttpResponseCode
{
  // info response
  HS_HTTP_RESPONSE_CODE_CONTINUE           = 100,
  HS_HTTP_RESPONSE_CODE_SWITCHING_PROTOCOL = 101,
  HS_HTTP_RESPONSE_CODE_PROCESSING         = 102,
  HS_HTTP_RESPONSE_CODE_EARLY_HINTS        = 103,

  // valid response
  HS_HTTP_RESPONSE_CODE_OK                              = 200,
  HS_HTTP_RESPONSE_CODE_CREATED                         = 201,
  HS_HTTP_RESPONSE_CODE_ACCEPTED                        = 202,
  HS_HTTP_RESPONSE_CODE_NON_AUTHORITATIVE_INFORMATION   = 203,
  HS_HTTP_RESPONSE_CODE_NO_CONTENT                      = 204,
  HS_HTTP_RESPONSE_CODE_RESET_CONTENT                   = 205,
  HS_HTTP_RESPONSE_CODE_PARTIAL_CONTENT                 = 206,

  // redirection
  HS_HTTP_RESPONSE_CODE_MULTIPLE_CHOICES                = 300,
  HS_HTTP_RESPONSE_CODE_MOVED_PERMANENTLY               = 301,
  HS_HTTP_RESPONSE_CODE_FOUND                           = 302,
  HS_HTTP_RESPONSE_CODE_SEE_OTHER                       = 303,
  HS_HTTP_RESPONSE_CODE_NOT_MODIFIED                    = 304,
  HS_HTTP_RESPONSE_CODE_TEMPORARY_REDIRECT              = 307,
  HS_HTTP_RESPONSE_CODE_PERMANENT_REDIRECT              = 308,

  // client error
  HS_HTTP_RESPONSE_CODE_BAD_REQUEST                     = 400,
  HS_HTTP_RESPONSE_CODE_UNAUTHORIZED                    = 401,
  HS_HTTP_RESPONSE_CODE_PAYMENT_REQUIRED                = 402,
  HS_HTTP_RESPONSE_CODE_FORBIDDEN                       = 403,
  HS_HTTP_RESPONSE_CODE_NOT_FOUND                       = 404,
  HS_HTTP_RESPONSE_CODE_METHOD_NOT_ALLOWED              = 405,
  HS_HTTP_RESPONSE_CODE_NOT_ACCEPTABLE                  = 406,
  HS_HTTP_RESPONSE_CODE_PROXY_AUTHENTICATION_REQUIRED   = 407,
  HS_HTTP_RESPONSE_CODE_REQUEST_TIMEOUT                 = 408,
  HS_HTTP_RESPONSE_CODE_CONFLICT                        = 409,
  HS_HTTP_RESPONSE_CODE_GONE                            = 410,
  HS_HTTP_RESPONSE_CODE_LENGTH_REQUIRED                 = 411,
  HS_HTTP_RESPONSE_CODE_PRECONDITION_FAILED             = 412,
  HS_HTTP_RESPONSE_CODE_PAYLOAD_TOO_LARGE               = 413,
  HS_HTTP_RESPONSE_CODE_URI_TOO_LONG                    = 414,
  HS_HTTP_RESPONSE_CODE_UNSUPPORTED_MEDIA_TYPE          = 415,
  HS_HTTP_RESPONSE_CODE_RANGE_NOT_SATISFIABLE           = 416,
  HS_HTTP_RESPONSE_CODE_EXPECTATION_FAILED              = 417,
  HS_HTTP_RESPONSE_CODE_IM_A_TEAPOT                     = 418,
  HS_HTTP_RESPONSE_CODE_UNPROCESSABLE_ENTITY            = 422,
  HS_HTTP_RESPONSE_CODE_TOO_EARLY                       = 425,
  HS_HTTP_RESPONSE_CODE_UPGRADE_REQUIRED                = 426,
  HS_HTTP_RESPONSE_CODE_PRECONDITION_REQUIRED           = 428,
  HS_HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS               = 429,
  HS_HTTP_RESPONSE_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE = 431,
  HS_HTTP_RESPONSE_CODE_UNAVAILABLE_FOR_LEGAL_REASONS   = 451,

  // server error
  HS_HTTP_RESPONSE_CODE_INTERNAL_SERVER_ERROR           = 500,
  HS_HTTP_RESPONSE_CODE_NOT_IMPLEMENTED                 = 501,
  HS_HTTP_RESPONSE_CODE_BAD_GATEWAY                     = 502,
  HS_HTTP_RESPONSE_CODE_SERVICE_UNAVAILABLE             = 503,
  HS_HTTP_RESPONSE_CODE_GATEWAY_TIMEOUT                 = 504,
  HS_HTTP_RESPONSE_CODE_HTTP_VERSION_NOT_SUPPORTED      = 505,
  HS_HTTP_RESPONSE_CODE_VARIANT_ALSO_NEGOTIATES         = 506,
  HS_HTTP_RESPONSE_CODE_INSUFFICIENT_STORAGE            = 507,
  HS_HTTP_RESPONSE_CODE_LOOP_DETECTED                   = 508,
  HS_HTTP_RESPONSE_CODE_NOT_EXTENDED                    = 510,
  HS_HTTP_RESPONSE_CODE_NETWORK_AUTHENTICATION_REQUIRED = 511,
};

enum HSCookieSameSite
{
  HS_COOKIE_SAME_SITE_NONE = 0,
  HS_COOKIE_SAME_SITE_STRICT,
  HS_COOKIE_SAME_SITE_LAX,
};

enum HSMimeType
{
  // use none to enable setting custom mime type header manually in route response
  HS_MIME_TYPE_NONE = 0,
  HS_MIME_TYPE_APPLICATION_OCTET_STREAM,

  HS_MIME_TYPE_TEXT_HTML,
  HS_MIME_TYPE_TEXT_PLAIN,
  HS_MIME_TYPE_TEXT_CSS,
  HS_MIME_TYPE_TEXT_XML,
  HS_MIME_TYPE_TEXT_JAVASCRIPT,
  HS_MIME_TYPE_TEXT_MATHML,

  HS_MIME_TYPE_IMAGE_APNG,
  HS_MIME_TYPE_IMAGE_AVIF,
  HS_MIME_TYPE_IMAGE_GIF,
  HS_MIME_TYPE_IMAGE_JPEG,
  HS_MIME_TYPE_IMAGE_PNG,
  HS_MIME_TYPE_IMAGE_SVG,
  HS_MIME_TYPE_IMAGE_WEBP,
  HS_MIME_TYPE_IMAGE_X_ICON,
  HS_MIME_TYPE_IMAGE_TIFF,
  HS_MIME_TYPE_IMAGE_X_MS_BMP,

  HS_MIME_TYPE_AUDIO_MIDI,
  HS_MIME_TYPE_AUDIO_MPEG,
  HS_MIME_TYPE_AUDIO_WAV,
  HS_MIME_TYPE_AUDIO_WEBM,
  HS_MIME_TYPE_AUDIO_OGG,
  HS_MIME_TYPE_AUDIO_X_M4A,
  HS_MIME_TYPE_AUDIO_X_REALAUDIO,

  HS_MIME_TYPE_VIDEO_WEBM,
  HS_MIME_TYPE_VIDEO_3GPP,
  HS_MIME_TYPE_VIDEO_MP2T,
  HS_MIME_TYPE_VIDEO_MP4,
  HS_MIME_TYPE_VIDEO_MPEG,
  HS_MIME_TYPE_VIDEO_QUICKTIME,
  HS_MIME_TYPE_VIDEO_X_FLV,

  HS_MIME_TYPE_APPLICATION_OGG,
  HS_MIME_TYPE_APPLICATION_FONT_WOFF,
  HS_MIME_TYPE_APPLICATION_ATOM,
  HS_MIME_TYPE_APPLICATION_RSS,
  HS_MIME_TYPE_APPLICATION_JSON,
  HS_MIME_TYPE_APPLICATION_JAVA_ARCHIVE,
  HS_MIME_TYPE_APPLICATION_MSWORD,
  HS_MIME_TYPE_APPLICATION_PDF,
  HS_MIME_TYPE_APPLICATION_POSTSCRIPT,
  HS_MIME_TYPE_APPLICATION_RTF,
  HS_MIME_TYPE_APPLICATION_X_7Z_COMPRESSED,
  HS_MIME_TYPE_APPLICATION_X_JAVA_JNLP_FILE,
  HS_MIME_TYPE_APPLICATION_X_PERL,
  HS_MIME_TYPE_APPLICATION_X_RAR_COMPRESSED,
  HS_MIME_TYPE_APPLICATION_X_REDHAT_PACKAGE_MANAGER,
  HS_MIME_TYPE_APPLICATION_X_SHOCKWAVE_FLASH,
  HS_MIME_TYPE_APPLICATION_X_TCL,
  HS_MIME_TYPE_APPLICATION_X_X509_CA_CERT,
  HS_MIME_TYPE_APPLICATION_XHTML_XML,
  HS_MIME_TYPE_APPLICATION_ZIP,
};

enum HSConnectionType
{
  HS_CONNECTION_TYPE_UNKNOWN = 0,
  HS_CONNECTION_TYPE_CLOSE,
  HS_CONNECTION_TYPE_KEEP_ALIVE,
};

enum HSXFrameOptionsReponseHeader
{
  HS_X_FRAME_OPTIONS_RESPONSE_HEADER_NONE = 0,
  HS_X_FRAME_OPTIONS_RESPONSE_HEADER_DENY,
  HS_X_FRAME_OPTIONS_RESPONSE_HEADER_SAMEORIGIN,
};

enum HSXContentTypeOptionsResponseHeader
{
  HS_X_CONTENT_TYPE_OPTIONS_RESPONSE_HEADER_NONE = 0,
  HS_X_CONTENT_TYPE_OPTIONS_RESPONSE_HEADER_NOSNIFF,
};

enum HSReferrerPolicyResponseHeader
{
  HS_REFERRER_POLICY_RESPONSE_HEADER_NONE = 0,
  HS_REFERRER_POLICY_RESPONSE_HEADER_NO_REFERRER,
  HS_REFERRER_POLICY_RESPONSE_HEADER_NO_REFERRER_WHEN_DOWNGRADE,
  HS_REFERRER_POLICY_RESPONSE_HEADER_ORIGIN,
  HS_REFERRER_POLICY_RESPONSE_HEADER_ORIGIN_WHEN_CROSS_ORIGIN,
  HS_REFERRER_POLICY_RESPONSE_HEADER_SAME_ORIGIN,
  HS_REFERRER_POLICY_RESPONSE_HEADER_STRICT_ORIGIN,
  HS_REFERRER_POLICY_RESPONSE_HEADER_STRICT_ORIGIN_WHEN_CROSS_ORIGIN,
  HS_REFERRER_POLICY_RESPONSE_HEADER_UNSAFE_URL,
};

/**
 * Return the string value of the mime type.
 */
const char *hs_constants_mime_type_to_string(enum HSMimeType);

/**
 * Returns the mime type for the file extension or binary if unknown.
 */
enum HSMimeType hs_constants_file_extension_to_mime_type(char *);

#endif

